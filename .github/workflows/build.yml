name: Build desktop apps

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
    branches:
      - main

env:
  PYTHON_VERSION: "3.11"
  APP_NAME: "Media Scrape"            # ← change to your app name
  APP_ENTRY: "news_gui.py"            # ← change to your entry script
  PYSIMPLEGUI_INDEX: "https://PySimpleGUI.net/install"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry>=1.8"

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      # Add private PySimpleGUI index (if not already in pyproject.toml)
      - name: Add PySimpleGUI private source
        run: |
          poetry source add --priority explicit pysimplegui "${{ env.PYSIMPLEGUI_INDEX }}"
          poetry source show

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies (including dev)
        run: poetry install --with dev

      - name: Ensure PySimpleGUI installed from private source
        run: poetry add PySimpleGUI --source pysimplegui || true

      - name: Build with PyInstaller (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          poetry run pyinstaller --name "${APP_NAME}" --onefile --windowed "${APP_ENTRY}"
          poetry run pyinstaller --name "${APP_NAME}" --windowed "${APP_ENTRY}"
          cd dist
          if [ -d "${APP_NAME}.app" ]; then zip -r "${APP_NAME}-macOS.app.zip" "${APP_NAME}.app"; fi
          cd -

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: poetry run pyinstaller --name "$env:APP_NAME" --onefile --windowed "$env:APP_ENTRY"

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macOS
          path: |
            dist/${{ env.APP_NAME }}
            dist/${{ env.APP_NAME }}.app
            dist/${{ env.APP_NAME }}-macOS.app.zip
          if-no-files-found: ignore

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Windows
          path: dist/${{ env.APP_NAME }}.exe
          if-no-files-found: error


